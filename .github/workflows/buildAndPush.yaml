name: Franchise Assortment Service Build Dockerfile

permissions:
  id-token: write
  contents: write

on:
  push:
    branches:
      - main
    paths-ignore:
      - deploy/**
      - "README.md"
      - ".github/**"

  workflow_dispatch:

jobs:
  test:
    runs-on: [self-hosted, arc-dind-rootless-enterprise]
    env:
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "adopt-hotspot"

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build application
        uses: gradle/gradle-build-action@v2

      - run: chmod +x gradlew

  vars:
    needs:
      - test
    runs-on: [self-hosted, arc-dind-rootless-enterprise]
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.BRANCH_PROTECT_BYPASS_GITHUB_APP_ID }}
          private_key: ${{ secrets.BRANCH_PROTECT_BYPASS_GITHUB_APP_PRIVATE_KEY }}
      - name: checkout the repo
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
      - name: Get short sha of the commit
        id: shorten_sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
    outputs:
      dockerfile: ./Dockerfile
      deploy-file: "deploy/chartis-dev.yaml"
      app-name: franchise-assortment-service
      image-name: gap/pt-gloss/franchise-assortment-service
      image-semver: "${{ steps.shorten_sha.outputs.short_sha }}"
      deploy-branch: 'main'
      generate_token: "${{ steps.generate_token.outputs.token }}"

  docker-build-scan-push:
    needs:
      - vars
    uses: continuous-delivery-platform/docker-build-scan-push/.github/workflows/docker-build-scan-push.yml@main
    with:
      app-name: ${{ needs.vars.outputs.app-name }}
      image-name: ${{ needs.vars.outputs.image-name }}
      image-tag: ${{ needs.vars.outputs.image-semver }}
      # dockerfile: ./Dockerfile
      skip-twistlock: true
      build-args: "SPRING_PROFILES_ACTIVE=development"
    secrets:
      secret1: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

  tag-repo:
    name: Tag repo
    needs:
    - vars
    - docker-build-scan-push
    runs-on: [ self-hosted ]
    steps:
      - name: checkout the repo
        uses: actions/checkout@v3

      - name: Tag repo with new version
        uses: continuous-delivery-platform/git-tag-version@main
        with:
          tag: ${{ needs.vars.outputs.image-semver }}
          github-token: ${{ needs.vars.outputs.generate_token }}

  update-chartis-dev-manifest:
    runs-on: [self-hosted]
    needs:
      - vars
      - docker-build-scan-push
    steps:
      - name: Generate a token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.BRANCH_PROTECT_BYPASS_GITHUB_APP_ID }}
          private_key: ${{ secrets.BRANCH_PROTECT_BYPASS_GITHUB_APP_PRIVATE_KEY }}
      - name: checkout the repo
        uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ needs.vars.outputs.deploy-branch }}

      - name: Update chartis
        uses: continuous-delivery-platform/update-deploy-manifest@main
        with:
          image-tag: ${{ needs.vars.outputs.image-semver }}
          deploy-file: ${{ needs.vars.outputs.deploy-file }}
          github-token: ${{ steps.generate_token.outputs.token }}
          product-name: ${{ needs.vars.outputs.app-name }}
          
  deploy-to-dev:
    needs:
      - vars
      - docker-build-scan-push
      - update-chartis-dev-manifest
    runs-on: [self-hosted, arc-dind-rootless-enterprise]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: ${{needs.vars.outputs.deploy-branch}}
      - name: Deploy to Dev

        uses: continuous-delivery-platform/chartis-deploy@main
        with:
          chartis-abstract: ${{ needs.vars.outputs.deploy-file }}
          image-tag: ${{ needs.vars.outputs.image-semver }}        
